# -*- coding: utf-8 -*-
"""Álgebra Linear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bHwguOS_MwwlFL4bXqsG2eU5IwM7QUoY

## Aula -> 04/06
"""

from sympy import Matrix, symbols, Rational

x, y, z = symbols ("x:z")
A = Matrix([[1,2,-3],[2,3,4],[4,7,13]])
B = Matrix([x,y,z])
C = Matrix([4,5,13])
A

B

C

A*B

A1 = A.inv()
A1

A1*A

A1*C #o produto da inversa por um vetor coluna é uma das soluções do sistema

#B*A #Erro

A.det() #Se o determinante for 0 não tem inversa

a, b = symbols("a,b")
a

b

A2 = Matrix([[4, -3], [-4,5], [3,6]])
A2

A3 = Matrix([a,b])
A3

A4 = A2*A3
A4

E = Matrix([[1, -1, -3, 0], [4,3,2,0], [4,6,8,0]])
E

#Processo de Escalonamento
E[1,:] = -4*E[0,:]+ E[1,:]
E

E[2,:] = -4*E[0,:] + E[2,:]

E

E[1,:] = 1/7*E[1,:]
E

E[2,:] = -10*E[1,:] + E[2,:]
E
#Sistema possivel indeterminado

c = symbols("c")
c

F = Matrix([[-3,5,1,a],[0,-1,1,b],[4,2,3,c]])
F

F[0,:] = -Rational(1,3)*F[0,:]
F

F[2,:] = -4*F[0,:] +F[2,:]
F

F[2,:] = Rational(26,3)*F[1,:] + F[2,:]

F

F[1,:] = -1*F[1,:]
F[2,:] = Rational(1,13)* F[2,:]
F

D = Matrix([[1,x],[y,2]])
D

D**2 #Potencias de Matriz

D.det()

D.inv()

D**-1 #Calcula a Inversa da Matriz

F = Matrix([[1,2,3],[4,5,6]])
F

F1 = F.applyfunc(lambda x: x+2)
F1

from sympy import pi,cos,Symbol,Integer

G = Matrix([[pi/2,pi/3,0]])
G

G1 = G.applyfunc(cos)
G1

def custom_function(x):
      t = Symbol("t")

      if isinstance(x, Integer) and x.is_even:
            return t

      return x

F.applyfunc(custom_function)

"""## Exercícios -> 18/06

### a) 𝓋1 = (1,2,1) 𝓋2 = (2,5,0) 𝓋3 = (3,3, 0)

c1𝓋1 + c2𝓋2 + c3𝓋3 = 0

c1(1,2,1) + c2(2,5,0) + c3(3,3,8) = 0

(c1, 2c1, c1) + (2c2, 5c2, 0) + (3c3, 3c3, 8c3%%)
"""

V = Matrix([[1, 2, 3], [2, 5, 3], [1,0,8]])
V

V.det()

U = Matrix([[1, 2, 3, 0], [2, 5, 3, 0], [1,0,8,0]])
U

U[1,:] = -2*U[0,:] +U[1,:]
U

U[2,:] = -1*U[0,:] +U[2,:]
U

U[2,:] = 2*U[1,:] +U[2,:]
U

"""### b) 𝓋1 = (1,2,-1), 𝓋2 = (6,4,2), 𝓋3 = (4, -1, 5)

c1𝓋1 + c2𝓋2 + c3𝓋3 = 0

c1(1,2,-1) + c2(6,4,2) + c3(4,-1, 5) = 0

(c1, 2c1, -c1) + (6c2, 4c2, 2c2) + (4c3, -c3, 5c3)
"""

W = Matrix([[1, 6, 4], [2, 4, -1], [-1, 2, 5]])
W

W.det()

Y = Matrix([[1, 6, 4, 0], [2, 4, -1, 0], [-1, 2, 5, 0]])
Y

Y[1,:] = -2*Y[0,:] +Y[1,:]
Y

Y[1,:] = Rational(-1,8)* Y[1,:]
Y

Y[2,:] = Y[0,:] +Y[2,:]
Y

Y[2,:] = -8*Y[1,:] +Y[2,:]
Y

#SI -> zerou a ultima fileira

"""### c) 𝓋1 = (2, -4, 6), 𝓋2 = (0, 7, -5), 𝓋3 = (6, 9,8 ), 𝓋4 = (5, 0, 1)

c1𝓋1 + c2𝓋2 + c3𝓋3 + c4𝓋4 = 0

c1(2, -4, 6) + c2(0,7,-5) + c3(6,9,8) + c4(5,0,1) = 0

(2c1, -4c1, 6c1) + (0, 6c2, -5c2) + (6c3, 9c3, 8c3) + (5c4, 0, c4) = 0
"""

Z = Matrix([[2, 0, 6, 5, 0], [-4, 6, 9, 0, 0], [6, -5, 8, 1, 0]])
Z

Z[0,:] = Rational(1,2)* Z[0,:]
Z

Z[1,:] = 4*Z[0,:] +Z[1,:]
Z

Z[1,:] = Rational(1,6)* Z[1,:]
Z

Z[2,:] = -6*Z[0,:] + Z[2,:]
Z

Z[2,:] = 5*Z[1,:] + Z[2,:]
Z



x, y, z = symbols ("x:z")
Z = Matrix([[x-2, -1, -1], [-2, x-1, 2], [1, 0, x+2]])
Z

Z.det()

"""##Avaliação

###1)
"""

#Considere as seguintes Matrizes
A = Matrix([[3, 0], [-1, 2], [1, 1]])
A

B = Matrix([[4, -1], [0, 2]])
B

C = Matrix([[1,4,2], [3,1,5]])
C

D = Matrix([[1, 5, 2], [-1, 0, 1], [3, 2, 4]])
D

E = Matrix([[6, 1, 3], [-1, 1, 2], [4, 1, 3]])
E

#a)
D + E

#b)
D - E

#d)
2*A.transpose() + C

#c) 2*B - C

"""###02. Resolva os sistemas utilizando o conceito de Matriz Inversa e determinante

####a)
"""

F = Matrix([[1, 1, 1, 5], [1,1,-4,10], [-4,1,1,0]])
F

G = Matrix([[1, 1, 1], [1,1,-4], [-4,1,1]])
G

G.det()

GI = G.inv()
GI

G2 = Matrix([5, 10, 0])
G2

GI * G2

"""####b)"""

a, b, c = symbols ("a:c")
B = Matrix([a,b,c])
B

A = Matrix([[1,1,3],[2,5,5],[3,5,8]])
A

A.det()

AI = A.inv()
AI

AI * B

"""###04)"""

A = Matrix([[0.7,0.2,0.1],[0.3,0.5,0.2],[0.4,0.4,0.2]])
A

A**2

"""###06)"""

A = Matrix([[-1,1,1],[3,-1,0],[2,-4,-5]])
A

A[0,:] = -1*A[0,:]
A

A[1,:] = -3*A[0,:] + A[1,:]
A

A[1,:] = Rational(1,2)* A[1,:]
A

A[2,:] = -2*A[0,:] + A[2,:]
A

A[2,:] = 2*A[1,:] + A[2,:]
A

A = Matrix([[1, -2, 3],[-3,6,9],[-2,4,-6]])
A

A[1,:] = 3*A[0,:] + A[1,:]
A

A[2,:] = 2*A[0,:] + A[2,:]
A

A = Matrix([[1, -2, 3],[-3,6,9],[-2,4,-6]])
A

A[2,:] = Rational(1,2)* A[2,:]
A

A[1,:] = Rational(1,3)* A[1,:]
A

"""###07)

####a) v1 = (2,2,2) v2 = (0,0,3) v3 = (0,1,1)
(a,b,c) = x(2,2,2) + y(0,0,3), z(0,1,1)
"""

x, y, z = symbols ("x:z")
a, b, c = symbols ("a:c")
A = Matrix([[2, 0, 0,a], [2,0,1,b],[2,3,1,c]])
A

A[0,:] = Rational(1,2)* A[0,:]
A

A[1,:] = -2*A[0,:] + A[1,:]
A

A[2,:] = -2*A[0,:] + A[2,:]
A

A[2,:] = -1*A[1,:] + A[2,:]
A

A[2,:] = Rational(1,3)* A[2,:]
A

x, y, z = symbols ("x:z")
a, b, c = symbols ("a:c")
A = Matrix([[2, 4, 8,a], [-1,1,-1,b],[3,2,8,c]])
A

A[0,:] = Rational(1,2)* A[0,:]
A

A[1,:] = A[0,:] + A[1,:]
A

A[1,:] = Rational(1,3)* A[1,:]
A

A[2,:] = -3*A[0,:] + A[2,:]
A

A[2,:] = 4*A[1,:] + A[2,:]
A



"""###3"""

B = Matrix([[x, -1], [3, 1-x]])
B

C = Matrix([[1, 0, -3], [2, x, -6], [1, 3, x-5]])
C

Bd = B.det()
Bd

Cd = C.det()

Cd

Bd = Cd