# -*- coding: utf-8 -*-
"""Trabalho Final - Integrais e Interpolacao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b3-c9Fe9jIBHdfw02sNV2wZreHzHV6sy
"""

from scipy import interpolate
from numpy import polynomial as P
import numpy as np
from scipy import linalg
import matplotlib.pyplot as plt
import sympy as sp

x = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])
y = np.array([0.4, 0.6, 1.2, 1.9, 2.7, 3.4, 3.9, 4.2, 4.5, 4.7, 4.4, 4.9, 4.9, 4.9, 4.9, 4.7, 4.6, 4.7, 4.4, 4.2, 4.0, 3.8, 3.5, 3.2, 3, 2.7, 2.3,1.8,1.0])

deg = len(x) -10
deg

f1 = P.Polynomial.fit(x,y,deg)
f1

xx = np.linspace(x.min(), x.max(), 100)

fig, ax = plt.subplots(figsize=(8, 4))
ax.scatter(x, y)
for n in [1, 2, 3, 5]:
    f = interpolate.interp1d(x, y, kind=n)
    ax.plot(xx, f(xx), label='order %d' % n)
ax.legend()
ax.set_ylabel(r"$y$", fontsize=18)
ax.set_xlabel(r"$x$", fontsize=18)

ax.set_xticks(np.arange(0, 28))
ax.set_yticks(np.arange(0, 15))

# Função para calcular a integral usando a regra do retângulo inferior
def integral_retangulo_inferior(x, y):
    h = x[1] - x[0]  # tamanho do intervalo
    integral = sum(y[:-1] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo inferior
integral_inferior = integral_retangulo_inferior(x, y)

print(integral_inferior)

def integral_retangulo_superior(x, y):
    h = x[1] - x[0]
    integral = sum(y[1:] * h)
    return integral

integral_superior = integral_retangulo_superior(x, y)

print(integral_superior)

# Calcular a média entre as integrais
media_integral = (integral_inferior + integral_superior) / 2

print("Média das integrais:", media_integral)

from scipy.integrate import simps

# Calcular a integral usando a regra de Simpson
integral_simpson = simps(y, x)

print(integral_simpson)

xi = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])
yi = np.array([0.2, 0.5, 1.2, 1.9, 2.7, 3.2,3.4,3.7,4,4.4,4.5, 4.6, 4.7,4.7,4.7,4.7,4.6,4.5,4.5,4.3,4.2,4,3.8,3.6,3.3,2.8,2.4,1.9,0.8])

degi = len(xi) - 10

fig, ax = plt.subplots(figsize=(8, 4))
ax.scatter(x, y)
for n in [1, 2, 3, 5]:
    f = interpolate.interp1d(xi, yi, kind=n)
    ax.plot(xx, f(xx), label='order %d' % n)
ax.legend()
ax.set_ylabel(r"$y$", fontsize=18)
ax.set_xlabel(r"$x$", fontsize=18)

ax.set_xticks(np.arange(0, 28))
ax.set_yticks(np.arange(0, 20))

# Função para calcular a integral usando a regra do retângulo inferior
def integral_retangulo_inferior2(xi, yi):
    h = xi[1] - xi[0]  # tamanho do intervalo
    integral = sum(yi[:-1] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo inferior
integral_inferior2 = integral_retangulo_inferior(xi, yi)

print("Valor da integral usando a regra do retângulo inferior:", integral_inferior2)

# Função para calcular a integral usando a regra do retângulo superior
def integral_retangulo_superior2(xi, yi):
    h = xi[1] - xi[0]  # tamanho do intervalo
    integral = sum(yi[1:] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo superior
integral_superior2 = integral_retangulo_superior(xi, yi)

print("Valor da integral usando a regra do retângulo superior:", integral_superior2)

# Calcular a média entre as integrais
media_integral2 = (integral_inferior2 + integral_superior2) / 2

print("Média das integrais:", media_integral2)

# Calcular a integral usando a regra de Simpson
integral_simpson2 = simps(yi, xi)

print("Valor da integral usando a regra de Simpson:", integral_simpson2)

#Calculando Assimetria / Area total
diferenca_areas = media_integral - media_integral2
print("Diferença nas Áreas: ", diferenca_areas)
total_area = media_integral + media_integral2
print("Área Total: ", total_area)

porcentagem_assimetria = (diferenca_areas *100)/total_area
print("Porcentagem Assimetria: ", porcentagem_assimetria)

#Calculando Assimetria / Maior Area
porcentagem_assimetria2 = (diferenca_areas *100)/media_integral
print("Porcentagem Assimetria: ", porcentagem_assimetria2)

#Pontos do rasgo
xii = np.array([12, 13,14,15,16,17])
yii = np.array([4.9, 4.24, 3.6, 3.5, 4,4.7])

degree = len(xii) - 1
degree

f3 = P.Polynomial.fit(xii,yii,degree)
f3

def integral_retangulo_inferior3(xii, yii):
    h = xii[1] - xii[0]
    integral = sum(yii[:-1] * h)
    return integral


integral_inferior3 = integral_retangulo_inferior3(xii, yii)

print("Valor da integral usando a regra do retângulo inferior:", integral_inferior3)

def integral_retangulo_superior3(xii, yii):
    h = xii[1] - xii[0]
    integral = sum(yii[1:] * h)
    return integral

integral_superior3 = integral_retangulo_superior3(xii, yii)

print("Valor da integral usando a regra do retângulo superior:", integral_superior3)

# Parte Inferior ao rasgo
media_integral3 = (integral_inferior3 + integral_superior3) / 2

print("Média das integrais:", media_integral3)

#parte a direita
def integral_retangulo_inferior2(x, y):
    h = xi[1] - xi[0]  # tamanho do intervalo
    integral = sum(yi[:-1] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo inferior
integral_inferior5 = integral_retangulo_inferior(x[0:13], y[0:13])

print("Valor da integral usando a regra do retângulo inferior:", integral_inferior5)

#Parte a Direita
def integral_retangulo_superior2(x, y):
    h = xi[1] - xi[0]  # tamanho do intervalo
    integral = sum(yi[1:] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo superior
integral_superior5 = integral_retangulo_superior(x[0:13], y[0:13])

print("Valor da integral usando a regra do retângulo superior:", integral_superior5)

# Parte A direita
media_integral5 = (integral_inferior5 + integral_superior5) / 2

print("Média das integrais:", media_integral5)

#Parte inferior ao rasgo
integral_simpson3 = simps(yii, xii)

print("Valor da integral usando a regra de Simpson:", integral_simpson3)

#parte a esquerda
def integral_retangulo_inferior2(x, y):
    h = xi[1] - xi[0]  # tamanho do intervalo
    integral = sum(yi[:-1] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo inferior
integral_inferior6 = integral_retangulo_inferior(x[17:28], y[17:28])

print("Valor da integral usando a regra do retângulo inferior:", integral_inferior6)

#Parte a Esquerda
def integral_retangulo_superior2(x, y):
    h = xi[1] - xi[0]  # tamanho do intervalo
    integral = sum(yi[1:] * h)  # soma das áreas dos retângulos
    return integral

# Calcular a integral usando a regra do retângulo superior
integral_superior6 = integral_retangulo_superior(x[17:28], y[17:28])

print("Valor da integral usando a regra do retângulo superior:", integral_superior6)

# Parte A Esquerda
media_integral6 = (integral_inferior6 + integral_superior6) / 2

print("Média das integrais:", media_integral6)

#Esquerda
integral_simpson4 = simps(y[0:13], x[0:13])

print("Valor da integral usando a regra de Simpson:", integral_simpson4)

#Direita
integral_simpson5 = simps(y[17:28], x[17:28])

print("Valor da integral usando a regra de Simpson:", integral_simpson5)

#Area total, desconsiderando o rasgo
integral_sem_rasgo = media_integral3 + media_integral5 + media_integral6
integral_sem_rasgo

#Area do Rasgo
area_rasgo = media_integral - integral_sem_rasgo
area_rasgo

porcentagem_rasgo = (area_rasgo* 100)/total_area
print("Porcentagem Correspondente ao Rasgo:", porcentagem_rasgo)

u = np.array([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28])
v = np.array([0.4, 0.6, 1.2, 1.9, 2.7, 3.4, 3.9, 4.2, 4.5, 4.7, 4.4, 4.9,4.9, 4.24, 3.6, 3.5, 4, 4.7, 4.4, 4.2, 4.0, 3.8, 3.5, 3.2, 3, 2.7, 2.3,1.8,1.0])

#Grafico com o rasgo
fig, ax = plt.subplots(figsize=(8, 4))
ax.scatter(u, v)
for n in [1, 2, 3, 5]:
    f = interpolate.interp1d(u, v, kind=n)
    ax.plot(xx, f(xx), label='order %d' % n)
ax.legend()
ax.set_ylabel(r"$y$", fontsize=18)
ax.set_xlabel(r"$x$", fontsize=18)

ax.set_xticks(np.arange(0, 28))
ax.set_yticks(np.arange(0, 17))