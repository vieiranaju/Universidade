# -*- coding: utf-8 -*-
"""18/06b.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TYXa3hCDxQkuFAD07awZPhVpuukB6fws

Operações básicas
"""

a = 2

b = 5

soma = a + b

subtracao = a - b

multiplicao = a * b

divisao = a / b

print(soma)

print(subtracao)

print(multiplicao)

print(divisao)

c = 3.0
d = 5.0
s = c + d
print(s)

"""Potência"""

a_quadrado = a**2
a_cubo = a**3
print(a_quadrado)
print(a_cubo)

"""Utilizando a função pow"""

from math import pow

a_quarta = pow(a,2)
a_b = pow(a,b)
print(a_quarta)
print(a_b)

"""Radiciação"""

a_raiz = a**(1.0/2)
a_r = pow(a,1/2)
print(a_raiz)
print(a_r)

"""Arredondamento

"""

a = 3.456
b = 4.678
c = 5.5
arred_a = round(a)
arred_b = round(b)
arred_c = round(c)
arred_a1 = round(a,2) #permite escolher a quantidade de casas após a vírgula
print(arred_a)
print(arred_b)
print(arred_c)
print(arred_a1)

"""Frações"""

from fractions import Fraction

a = Fraction(1,4)
b = Fraction(2,3)
soma = a + b
subtracao = a - b
multiplicao = a * b
divisao = a / b
print(soma)
print(subtracao)
print(multiplicao)
print(divisao)

"""Operações com Polinômios"""

from numpy import polyadd, polysub, polymul, polydiv

coef_poli1 = [3, 2, 1] #3x**2 + 2x - 1
coef_poli2 = [4, -1, 3] #4x**2 - x + 3
resul1 = polymul(coef_poli1, coef_poli2)
print(resul1)

"""Fatoração de Polinômio"""

from sympy.abc import x
from sympy import factor

result1 = factor(x**2 + 3 * x)
result2 = factor(x**2 - 9)
result3 = factor(x**2 - 4 * x + 4)
result4 = factor(x**2 + x - 6)
print(result1)
print(result2)
print(result3)
print(result4)

from sympy import symbols, Lambda, sin
from sympy import expand

x = symbols("x")
f = Lambda(x, x*(sin(x)+2)+x)
f.expand(deep = False)
f(1)

f(2)

f(sin(y))

f(x+y) - f(x)

x = symbols("x")
g = Lambda(x, x**2 + 2*x + 3)
g

a, h = symbols("a, h")
g(a + h)

g(a)

g(a + h) - g(a)

s, t, u = symbols("s,t,u")
f = Lambda((s, t, u), s*t+u)
f

f(2,3,4)

"""from sympy import expand

x = symbols("x")
p = x(x(sin(x) + 2) + x)
p.expand(deep = False)

"""

from sympy import symbols, Lambda, sin

y = symbols ("y")
x = symbols("x")
f = Lambda (x, x**2 + 3)
f = Lambda (y, y**2 + 3)
f

from sympy import expand

x = symbols("x")
f = Lambda(x, x*(sin(x)+2)+x)
f.expand(deep = False)

f.expand(deep = True)

f(a+h)**2

f(a+h) - f(a)
f.expand(deep = False)

from sympy import collect, Rational

alpha, beta = symbols("alpha, beta")

expr= alpha * beta + alpha + 1
expr

r = expr.collect(alpha)
r

i = Lambda(x, x**2 + 3*x + 1)
i

"""Help

"""

e, l = symbols("e, l", real = True, positive = True)
rho, p, pi, sigma = symbols("rho, p, pi, sigma", real = True, positive = True)
V, M = symbols("V, M", real = True, positive = True)
V = pi * (e/2)**2 *l + Rational(4,3) * pi * (e/2)**3
M = pi * e**2 * rho * pi/(2 * sigma) * (l + e/2)
display(V, M)

V.factor()/e**3

"""Numerador e Denominador"""

x = symbols("x")
expr1 = (x**2 +1)/x
expr1

from sympy import fraction, numer, denom
num, den = fraction(expr1)
display(num, den)

num = numer(expr1)
den = denom(expr1)
display(num,den)

"""Tipos de Números"""

a = 2
b = 2.0
c = 3/3
type(a), type(b),type(c)

expr01 = x + s
expr02 = x + 2.0
expr03 = x + 2/3
expr01, expr02, expr03

expr = x + Rational(2,3)
expr

"""Indefinido 11/07"""

from sympy import solve, solveset, symbols, Symbol, sin, Eq, Abs, Interval, FiniteSet, cos, Intersection
p, v, r, t = symbols("p, v, r, t")
eq = p*v - r*t
s1 = solve(eq, t)
s2 = solveset(eq, t)
display(eq, s1, s2)

print(type(s2))

eq = Eq(sin(x), 1)
s1 = solve(eq)
s2 = solveset(eq)

display(eq, s1, s2)

#cos^2(x) + sen^2(x) = 1 --> Relação fundamental
#Xa^2 + Ya^2
#sen(x) = Co/H
#sen(x) = Ya
#cos(x) = Ca/H
#Cos = Xa
#{2nπ -- > quantidade de voltas
# + 2/π --> lugar que vai parar
#relação entre graus e radianos
#π = 180 graus

print(s2.func)
s2.args

s2.lamda(1)

"""Módulo"""

x = Symbol("x", real = True)
eq = Eq(Abs(sin(x)),1)

s1 = solve(eq)
display (eq, s1, s2)

i = sin(x) + cos(x) >= 0
s1 = solve(i, x)
s2 = solveset(i, x, domain = Reals)
display(s1, s2)

from sympy import sqrt

h = sqrt((Rational(1,2) - x) * (x - 3)) <= 1
s1 = solve(h, x)
s2 = solveset(h, x, domain = Reals)
display(h, s1, s2)

from pylab import plot

x = [0, 1, 2, 3, 4]
y = [1, 3, 7, 9, 15]

plot (x, y)

from pylab import arange

x = arange (0, 4, 0.5) #definindo os valores do domínio.

y = 2*x
y1 = 6*x
y2 = x**2

plot(x, y, x, y1, x, y2)

x = arange(0, 10, 0.5)

y = 2*x
y1 = 6*x
y2 = x**2

plot(x, y, x, y1, x, y2)